extend type Mutation @guard(with: ["api"]) @namespace(field: "Api\\Users\\GraphQL\\Resolvers") {
    updateProfile (
        gender: Int
        id: Int!
        profiles: [ProfileInput!]!
    ): User
        @validate(validator: "Api\\Users\\Validators\\UpdateProfileValidator")
        @field(resolver: "UserResolver@update")
}

extend type Query @guard(with: ["api"]) @namespace(field: "Api\\Users\\GraphQL\\Resolvers") {
    dailyOperatorStats (
        user_id: Int!
    ): OperatorStats!
        @validate(validator: "Api\\Users\\Validators\\DailyOperatorStatsValidator")
        @field(resolver: "UserResolver@dailyOperatorStats")

    operatorStats (
        end_date: Date
        start_date: Date
    ): OperatorLeadStats
        @field(resolver: "UserResolver@getOperatorStats")

    me: User
        @field(resolver: "UserResolver@me")

    users (
        filters: FilterInput
    ): [User]
        @field(resolver: "UserResolver@list")
}

input ProfileInput {
    given_name: String
    locale: String!
    nickname: String
    surname: String
}

type OperatorLeadStats {
    users: [User]
    total: OperatorStats
}

type OperatorStats {
    call_failed: Int
    call_later: Int
    leads_processed: Int!
    pre_qualified: Int
    rejected: Int
    qualified: Int
}

type Profile {
    given_name: String
    locale: String!
    id: Int!
    nickname: String
    surname: String
}

type User {
    email: String!
    gender: Int
    id: Int!
    parent_id: Int
    profiles: [Profile]
        @field(resolver: "Api\\Users\\Types\\UserGraphQLType@profiles")
    stats: OperatorStats
    userRoles: [Role] @belongsToMany(relation: "userRoles")
    username: String!
}

type Role {
    id: Int
    role: String
    name: String
}
