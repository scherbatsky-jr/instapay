extend type Mutation @guard(with: ["api"]) @namespace(field: "Api\\Orders\\GraphQL\\Resolvers") {
   createOrder(
        store_id: Int!
        user_id: Int
        total_amount: Float!
        notes: String
        address_id: Int
        created_by: Int!
        notes: String
        items: [OrderItemInput!]!
   ): Order!
   @field(resolver: "OrderResolver@create")
}

extend type Mutation @namespace(field: "Api\\Orders\\GraphQL\\Resolvers") {
    updateOrder(
        id: Int!
        status: Int
        addressInfo: AddressInput
   ): Order!
   @field(resolver: "OrderResolver@update")
}

extend type Query @guard(with: ["api"]) @namespace(field: "Api\\Orders\\GraphQL\\Resolvers") {
   orders(
    filters: FilterInput
    sort: SortInput
   ): [Order!]!
    @field(resolver: "OrderResolver@list")
}

extend type Query @namespace(field: "Api\\Orders\\GraphQL\\Resolvers") {
   order(
    id: Int!
   ): Order!
    @field(resolver: "OrderResolver@find")
}

input OrderItemInput {
    product_id: Int!
    count: Int!
}

input AddressInput {
    first_name: String
    last_name: String
    contact: String
    email: String
    street: String
    area: String
    city: String
    state: String
    landmarks: String
}

type DeliveryAddress {
    id: Int!
    first_name: String
    last_name: String
    contact: String
    email: String
    street: String
    area: String
    city: String
    state: String
    landmarks: String
}

type Order {
    id: Int!
    store_id: Int!
    user_id: Int
    total_amount: Float!
    notes: String
    address_id: Int
    status: Int
    items: [OrderItem!]!
    deliveryAddress: DeliveryAddress
    created_by: Int!
    created_at: DateTime!
    updated_at: DateTime!
    deleted_at: DateTime
}

type OrderItem {
    id: Int!
    product_id: Int!
    product: Product!
    count: Int!
}

